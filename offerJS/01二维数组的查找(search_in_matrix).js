/* 1--一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。
请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 */

/* 思想：根据二维数组的结构，从左到右递增，从上到下递归，选择一个比较适合的切入点，
进行数组遍历，比较。这个选择的切入点需要满足，当要查找的数据与它作比较时，有唯
一的出路可走，如当要查找的数据大于这个切入点时，下面该往哪里继续查找，不能同时
几条路都可以选择，那判断起来就麻烦了。这里我们以第n行第1列数据为切入点，即二维数组
最左下角的元素，这样当要查找的数据大于该切入点时，直接j++向右进行遍历，如果要查找的数据小于该切入点时
，直接i--向上进行遍历，否则，那切入点即为要查找的数据，如此循环，直到找到为止。 */

function Find(target, array) {
    var row = array.length;
    if (row == 0) {
        return false;
    }
    var col = array[0].length;
    var i = row - 1, j = 0;  //以最后一行第一列为基准
    while (i >= 0 && j < col) { //循环
        if (array[i][j] < target) { //待查找值大，继续向右查找
            j++;
        } else if (array[i][j] > target) { //待查找值小，向上继续查找
            i--;
        } else {   //找到
            return true;
        }
    }
}